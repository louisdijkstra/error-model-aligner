#!/usr/bin/env python
from __future__ import print_function, division
from optparse import OptionParser
import os
import sys
import matplotlib.pyplot as plt
from matplotlib import animation
from matplotlib import colors
import numpy as np

__author__ = "Louis Dijkstra"

usage = """%prog [options] <histogram-dir> <variant-type> <extension> <x-label>

	<histogram-dir>	The folder with the histogram data as generated by 
				"generate-histogram-files.py"
	<variant-type> 	Either "deletion" or "insertion"
	<extension>	One of the extensions given to the histogram data files,
			e.g., insert-sizes, n-obs
	<x-label>	Label for the x-axis. Spaces are allowed. 
	
Creates a 2D histogram data in the files. Starts with length 1 and goes 
up to length 1000 bp. 
"""

class HistogramData:
	
	def __init__(self, histogram_filename, normalize=False):
		inputfile 	= open(histogram_filename, 'r')
		self.x_values 	= []
		self.count	= []
		self.max_count 	= float('-Inf')
		for line in inputfile:
			values = map(int, line.split())
			self.x_values.append(values[0])
			self.count.append(values[1])
			if self.max_count < values[1]:
				self.max_count = values[1]
		if normalize: 
			total = float(sum(self.count))
			if total != 0: 
				for i in range(len(self.count)):
					self.count[i] /= total  
				self.max_count /= total 


	def isEmpty(self):
		return self.count == [] 

	def returnMinimumX(self):
		if self.x_values == []:
			return None
		return self.x_values[0]

	def returnMaximumX(self):
		if self.x_values == []:
			return None
		return self.x_values[-1]

	def extendValues(self, min_x, max_x):
		if min_x != self.x_values[0]:
			diff = self.x_values[0] - min_x 
			self.x_values = range(min_x, self.x_values[0]) + self.x_values
			self.count = [0] * diff + self.count
		if max_x != self.x_values[-1]:
			diff = max_x - self.x_values[-1]
			self.count += [0] * diff
			self.x_values += range(self.x_values[-1] + 1, max_x + 1) 

	def setToZero (self, min_x, max_x):
		self.x_values = range(min_x, max_x + 1)
		self.count = [0] * (max_x - min_x + 1)
		
parser = OptionParser(usage=usage)
parser.add_option("-k", action="store", dest="min_x", default=None, type=int,  
				help="Minimum x-value (Default: no minimum)")
parser.add_option("-l", action="store", dest="max_x", default=None, type=int,   
				help="Maximum x-value (Default: no maximum)")
parser.add_option("-o", action="store", dest="outputfilename", default=None,  
				help="Figure is stored under this name")
(options, args) = parser.parse_args()

if (len(args)<4):
	parser.print_help()
	exit()

result_dir 	= args[0]
variant_type 	= args[1]
extension 	= args[2]
x_label		= ""
for i in range(3, len(args) - 1):
	x_label += args[i] + ' '
x_label += args[-1]  

if result_dir[-1] != '/':
	result_dir += '/'

if extension[0] != '.':
	extension = '.' + extension 

print("Reading data...")

histograms 		= []
overall_maximum_count 	= float('-Inf')
overall_minimum_x 	= float('Inf')
overall_maximum_x 	= float('-Inf')

for i in range(1,1001):
	histogram_filename = result_dir + variant_type + '.length' + str(i) + extension
	histogram = HistogramData(histogram_filename, normalize=False)
	histograms.append(histogram)
	
	if not histogram.isEmpty():
		if overall_minimum_x > histogram.returnMinimumX():
			overall_minimum_x = histogram.returnMinimumX()
		if overall_maximum_x < histogram.returnMaximumX():
			overall_maximum_x = histogram.returnMaximumX()
		if overall_maximum_count < histogram.max_count: 
			overall_maximum_count = histogram.max_count
print("DONE reading data...")

print("\nMinimal x-value: %d\nMaximal x-value: %d\nMaximal count: %d\n"%(overall_minimum_x, overall_maximum_x, overall_maximum_count))

print("Updating data...")
for histogram in histograms:
	if histogram.isEmpty():
		histogram.setToZero(overall_minimum_x, overall_maximum_x)
	else: 
		histogram.extendValues(overall_minimum_x, overall_maximum_x)
print("DONE updating data...")

print("Setting up the figure/axes etc...")

if options.min_x != None: 
	overall_minimum_x = options.min_x
if options.max_x != None:
	overall_maximum_x = options.max_x 
ax = plt.axes(xlim=(overall_minimum_x,overall_maximum_x), ylim=(0,overall_maximum_count))

X = [] # data matrix
for histogram in histograms:
	array = np.array(histogram.count)
	if (options.max_x != None):
		array = np.delete(array, range(options.max_x, len(histogram.count)))
	X.append(np.flipud(array)) 

X = np.array(X)
X = X.T
fig, ax = plt.subplots()

plt.xlabel("length")
plt.ylabel(x_label)
plt.title(variant_type)

im = ax.imshow(X, aspect='auto', cmap='binary', vmin=abs(X).min(), vmax=abs(X).max(), extent=[1, 1000, overall_minimum_x,overall_maximum_x])
im.set_interpolation('none')
cb = fig.colorbar(im, ax=ax)

cb.ax.set_ylabel('# of observations', rotation=90)

if options.outputfilename != None: 
	plt.savefig(options.outputfilename, bbox_inches='tight')
else:
	plt.show()


